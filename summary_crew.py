from dotenv import load_dotenv          # Importa a fun√ß√£o load_dotenv para carregar vari√°veis de ambiente a partir do arquivo .env
from crewai import Agent, Task, Crew, Process, LLM  # Importa classes necess√°rias do m√≥dulo crewai para gerenciar agente, tarefa, crew, processo e LLM

class SummaryCrew:
    """
    Classe para organizar um agente, tarefa e execu√ß√£o de resumos de mensagens do WhatsApp.
    """

    def __init__(self):
        load_dotenv()                      # Carrega as vari√°veis de ambiente definidas no arquivo .env
        self.llm = "gemini/gemini-2.0-flash" # Define o modelo LLM a ser utilizado para a gera√ß√£o de resumos
        
        self.create_crew()                 # Chama o m√©todo para configurar o agente, tarefa e crew

    def create_crew(self):
        # Configurar o agente respons√°vel por criar os resumos
        self.agent = Agent(
            role="Assistente de Resumos",   # Define o papel do agente como assistente de resumos
            goal="Criar resumos organizados e objetivos de mensagens de WhatsApp.",  
                                             # Define o objetivo do agente: resumos claros e objetivos das mensagens
            backstory=(                     # Define o contexto (backstory) do agente
                "Voc√™ √© um assistente de IA especializado em analisar e organizar informa√ß√µes "
                "extra√≠das de mensagens de WhatsApp, garantindo clareza e objetividade."
            ),
            verbose=True,                   # Habilita sa√≠das detalhadas para depura√ß√£o
            memory=False,                   # Desativa o uso de mem√≥ria, pois n√£o √© necess√°rio para essa tarefa simples
            llm=self.llm                    # Configura o modelo LLM definido anteriormente para gerar os resumos
        )

        # Configurar a tarefa que o agente deve desempenhar
        self.task = Task(
            description=r"""
Voc√™ √© um assistente de IA especializado 
em criar resumos organizados e objetivos 
de mensagens em grupos de WhatsApp. 
Seu objetivo √© apresentar as informa√ß√µes 
de forma clara e segmentada, 
usando o templete delimitado por <template>. 
Para alimentar o resumo use as mensagens
de WhatsApp delimitadas por <msgs>. 

Importante:
- Ignore mensagens que s√£o resumos anteriores.
- Retire os placeholders < > do texto. 
- Deve haver somente um t√≥pico da lista abaixo no resumo:
    - Resumo do Grupo
    - T√≥pico Principal
    - D√∫vidas, Erros e suas Solu√ß√µes
    - Resumo geral do per√≠odo
    - Links do Dia
    - Conclus√£o
- Quando n√£o houver informa√ß√µes sobre um t√≥pico simplesmente n√£o coloque o t√≥pico.

<template>
*Resumo do Grupoüìù - <Data ou Per√≠odo>*

*<T√≥pico Principal> <Emoji relacionado> - <Hor√°rio>*

- *Participantes:* <Nomes dos usu√°rios envolvidos>  
- *Resumo:* <Descri√ß√£o do t√≥pico discutido, incluindo detalhes importantes e a√ß√µes relevantes>  

*D√∫vidas, Erros e suas Solu√ß√µes ‚ùì - <Hor√°rio>*

- *Solicitado por:* <Nome do participante que levantou a d√∫vida ou relatou o erro>  
- *Respondido por:* <Nome(s) dos participantes que ofereceram solu√ß√µes ou respostas>
- *Resumo:* <Descri√ß√£o do problema ou d√∫vida e as solu√ß√µes ou respostas apresentadas.> 

*Resumo geral do per√≠odo üìä:*
- <Resumo curto e objetivo sobre o tom geral das intera√ß√µes ou assuntos discutidos no per√≠odo.>

*Links do Diaüîó:*
- <Caso sejam compartilhados links importantes, liste-os aqui com data e contexto.>

*Conclus√£oüîö:*
- <Conclua destacando o ambiente do grupo ou a produtividade das intera√ß√µes.>
</template>

Mensagens do grupo para an√°lise:

<msgs>
{msgs}
</msgs>
            """,  # Descri√ß√£o detalhada da tarefa, contendo template e instru√ß√µes para a cria√ß√£o do resumo
            expected_output=(  
                "Um resumo segmentado de acordo com o template fornecido, contendo apenas informa√ß√µes "
                "relevantes extra√≠das das mensagens fornecidas."
            ),  # Define a sa√≠da esperada da tarefa
            agent=self.agent,             # Atribui o agente configurado para executar essa tarefa
        )

        # Configurar o crew com os agentes e tarefas definidos, e o processo de execu√ß√£o
        self.crew = Crew(
            agents=[self.agent],           # Lista de agentes que far√£o parte do crew; neste caso, apenas um agente
            tasks=[self.task],             # Lista de tarefas a serem executadas pelo crew; neste caso, apenas uma tarefa
            process=Process.sequential,    # Define que as tarefas ser√£o processadas de forma sequencial
        )

    def kickoff(self, inputs):
        """
        Executa o processo de resumo de mensagens.

        Args:
            inputs (str): Mensagens de WhatsApp para processar.

        Returns:
            str: O resumo gerado no formato esperado.
        """
        result = self.crew.kickoff(inputs=inputs).raw  # Executa a tarefa do crew com os inputs fornecidos e obt√©m o resultado bruto
        return result  # Retorna o resumo gerado pelo processo